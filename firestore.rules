rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is connected to the data owner
    function isConnectedTo(userId) {
      return exists(/databases/$(database)/documents/connections/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/connections/$(request.auth.uid)).data.connectedTo == userId;
    }

    match /shares/{code} {
      allow read, write: if request.auth != null;
    }
    
    match /connections/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /feeds/{feedId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        isConnectedTo(resource.data.userId)
      );
      allow write: if request.auth != null && (
        request.auth.uid == request.resource.data.userId ||
        isConnectedTo(request.resource.data.userId)
      );
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        isConnectedTo(resource.data.userId)
      );
    }
    
    match /sleep/{sleepId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        isConnectedTo(resource.data.userId)
      );
      allow write: if request.auth != null && (
        request.auth.uid == request.resource.data.userId ||
        isConnectedTo(request.resource.data.userId)
      );
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        isConnectedTo(resource.data.userId)
      );
    }
  }
}